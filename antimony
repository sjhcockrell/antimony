#!/bin/bash

#  antimony
#
#  A simple script that will generate 'ttf', 'eot', and 'woff'
#  font formats suitable for displaying webfonts.
#
#  I use it in conjunction with Glyphs Mini, which exports an
#  'otf' font format, to create icon sets.
#
#  Named for Antimony (Sb), Atomic Number 51, a hardening
#  element added to lead type to create sharp edges.


# printInvalidOptionError
#   Prints generic message about a bad arg.
#
function printInvalidOptionError {
    error "Invalid option \`$1\'" "See \`antimony --help\` for usage."
    echo
    exit 1
}

# printRequiresArgumentError
#   Prints generic message about a flag needing an arg.
#
function printRequiresArgumentError {
    error "Option -$1 requires an argument." "See \`antimony --help\` for usage."
    echo
    exit 1
}

# usage
#   Prints usage instructions. Called when antimony invoked without flags,
#   or with `--help` or `-h` flags.
#
function usage {
    echo "usage: antimony [-f font_formats] [-c unicode_charactter_range] font.otf"
    echo
    echo "  -f [ttf,svg,eot,woff]"
    echo "     Format. Accepts a comma-separated list of file formats to export."
    echo

    # Option that doesn't exist yet.
    #echo "  -c [unicode-unicode]"
    #echo "     Characters. Accepts a range of unicode characters to be include."

    echo "  -h"
    echo "     Help. Prints this menu."
    echo
    exit 2
}


# =============================================================================
# {

source /usr/local/bin/tputcolors

echo
echo "${t_white}${t_bold}[Sb] Antimony${t_reset}"
echo

OTF=
OTF_PATH=
OTF_NAME=
FORMATS=
CHARS=

# No arguments. Print usage.
if [[ $# == 0 ]]; then
    usage
fi

# Process arguments.
while getopts ":hf:c:" opt; do
    case $opt in

        # Print help
        h)
            usage
        ;;

        # Formats.
        # This takes an argument after the flag as a comma-separated
        # list of formats.
        #   ex: svg,woff,eot,ttf
        f)
            FORMATS=$OPTARG

            if [[ $FORMATS == \-* ]] || [[ ! $FORMATS ]]; then
                printRequiresArgumentError "$opt"
            fi
        ;;

        # Character Ranges
        c)
            CHARS=$OPTARG

            if [[ $CHARS == \-* ]] || [[ ! $CHARS ]]; then
                printRequiresArgumentError "$opt"
            fi
        ;;

        # End of arguments.
        --)
            echo "end of arguments."
            break
        ;;

        # Error. Invalid argument.
        # Since the agrument turns into a `?` during processing,
        # getting the failed flag requires calling $OPTARG.
        \?)
            printInvalidOptionError "$OPTARG"
        ;;

        # Option requires an argument.
        # Since the actual argument turns into `:` or `?`, getting
        # the failed flag requires getting the $OPTARG
        :)
            printRequiresArgumentError "$OPTARG"
        ;;

    esac
done

shift $((OPTIND-1))

# Save target file as var.
OTF=$1

# Check if a file argument has been provided.
if [ ! -f $OTF ]; then
    error "Can't find that .otf file. Check your path?"
fi

# Check if the argument has the correct extension.
if [[ $OTF != *.otf ]]; then
    error "Antimony only works with *.otf files for now. Can't process this."
    echo
    exit 1
fi

FILE_PATH=`dirname $OTF`
FILE_NAME=`basename $OTF .otf`


# Split formats into an array.
# IF    : formats exists, split into array.
# ELSE  : default to building all.
if [ -z $FORMATS ]; then
    echo "Formats is empty, build all."
    FORMATS=('ttf' 'svg' 'woff' 'eot')
else
    STRING=$FORMATS
    IFS=',', read -ra FORMATS <<< "$STRING"
fi


# Begin build.
#
# TODO: Add scripting for creating character ranges; currently not supported
# by this script.
#
# See:
# http://fontforge.org/scripting.html
#
echo
echo "Building fonts"

# Make a unique id attr that we can apply to the <font> el in the SVG file
# from the first one-word component of the file name.
#
# (This implementation seems pretty terrible, not gonna lie. Sorry, everybody.

FLAG_KEEP_TTF=
TMP=`echo $FILE_NAME | sed -e 's/_/-/g' -e 's/ /-/g'`
TMP=(${TMP//-/ })
FONT_ID_ATTR=${TMP[0]}

for format in ${FORMATS[@]}; do
    case $format in
        ttf)
            echo "Making $FILE_NAME.ttf"
            fontforge -lang=ff -c "Open('$OTF');Generate('$OTF':r+'.ttf');Quit(0);" > /dev/null 2>&1
            FLAG_KEEP_TTF=1
            success
        ;;

        svg)
            echo "Making $FILE_NAME.svg"
            echo "(Adding id attribute of $FONT_ID_ATTR to <font> in SVG)"

            # If they don't want a TTF outputted, and one doesn't exist here,
            # we need to create one to export an eot.
            if [ -z $FLAG_KEEP_TTF ] && [ ! -f $FILE_PATH/$FILE_NAME.ttf ]; then
                fontforge -lang=ff -c "Open('$1');Generate('$1':r+'.ttf');Quit(0);" > /dev/null 2>&1
            fi

            # Actually make the SVG file now...
            java -jar /usr/local/bin/batik.jar $FILE_PATH/$FILE_NAME.ttf -autorange -id $FONT_ID_ATTR -o $FILE_PATH/$FILE_NAME.svg 2>&1

            # Cleanup any unwanted ttfs.
            if [ -z $FLAG_KEEP_TTF ]; then
                rm $FILE_PATH/$FILE_NAME.ttf 2>&1
            fi
            success
        ;;

        eot)
            echo "Making $FILE_NAME.eot"

            # If they don't want a TTF outputted, and one doesn't exist here,
            # we need to create one to export an eot.
            if [ -z $FLAG_KEEP_TTF ] && [ ! -f $FILE_PATH/$FILE_NAME.ttf ]; then
                fontforge -lang=ff -c "Open('$1');Generate('$1':r+'.ttf');Quit(0);" > /dev/null 2>&1
            fi

            ttf2eot < $FILE_PATH/$FILE_NAME.ttf > $FILE_PATH/$FILE_NAME.eot 2>&1

            # Cleanup any unwanted ttfs.
            if [ -z $FLAG_KEEP_TTF ]; then
                rm $FILE_PATH/$FILE_NAME.ttf 2>&1
            fi
            success
        ;;

        woff)
            echo "Making $FILE_NAME.woff"
            sfnt2woff $OTF > $FILE_PATH/$FILE_NAME.woff 2>&1
            success
        ;;
    esac
done

exit 0

# }
# =============================================================================
