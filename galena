#!/bin/bash
#
# galena
# A helper script to antimony, which, when given a CSS file with @font-face
# and a directory of font files, will base64 and inline svg, woff, and ttf
# components.



# usage
#   Prints usage information. Fn called when galena invoked without args,
#   or when `-h` flag provided.
#
function usage {
    echo "usage: galena -f <font name> -p <font path> <css file with @font-face>"
    echo
    echo "     ${t_white}${t_bold}<css file with @font-face>${t_reset}"
    echo "     Path to a css file that has the @font-face rule where you want to"
    echo "     put the base64 encoded strings."
    echo
    echo "  ${t_white}${t_bold}-f <font files>${t_reset}"
    echo "     Font file (including path) that you would like to be base 64"
    echo "     encoded. If you want to serialize multiple formats, separate files"
    echo "     with a commas and no spaces (eg. font.woff,font.ttf)."
    echo
    echo "  ${t_white}${t_bold}-h${t_reset}"
    echo "     Help. Prints this menu."
    echo
    exit 2
}

# printInvalidOptionError
# Prints generic message about a bad arg.
function printInvalidOptionError {
    error "Invalid option \`$1\'" "See \`antimony --help\` for usage."
    echo
    exit 1
}

# printRequiresArgumentError
# Prints generic message about a flag needing an arg.
function printRequiresArgumentError {
    error "Option -$1 requires an argument." "See \`antimony --help\` for usage."
    echo
    exit 1
}

# getMimeAndFormatType
#   @param $1 : font file path
#   @param $2 : return variable for mime type
#   @param $3 : return variable for format type
#   @returns  : {String} appropriate mime type, {String} appropriate format type
function getMimeAndFormatType {

    local __result1=$2
    local __result2=$3
    local font=$(basename $1)
    local font_ext=${font##*.}

    case $font_ext in
        otf)
            local mime="font/opentype"
            local format="opentype"
            ;;
        woff)
            local mime="application/font-woff"
            local format="woff"
            ;;
        ttf)
            local mime="application/octet-stream"
            local format="ttf"
            ;;
        svg)
            local mime="image/svg+xml"
            local format="svg"
            ;;
        eot)
            local mime="application/vnd.ms-fontobject"
            local format="embedded-opentype"
            ;;
        *)
            local mime="unknown"
            local format="unknown"
            ;;
    esac

    # return
    eval $__result1="'$mime'"
    eval $__result2="'$format'"
}

# getFormatType
#   @param $1 : font file path
#   @param $2 : return variable
#   @returns  : {String} appropriate CSS format type for @font-face.
function getFormatType {

    local __result=$2
    local font=$(basename $1)
    local font_
}

# =============================================================================
# {

source /usr/local/bin/tputcolors

echo
echo "${t_white}${t_bold}[Pb] Galena${t_reset}"
echo

# no args, print usage.
if [[ $# == 0 ]]; then
    usage
fi

# process args.
while getopts ":hf:" opt; do
    case $opt in

        # help
        h)
            usage
        ;;

        # fonts
        f)
            fonts_csv=$OPTARG
            ;;

        # end of args
        --)
            break
            ;;

        # invalid argument.
        # Since the agrument turns into a `?` during processing,
        # getting the failed flag requires calling $OPTARG.
        \?)
            printInvalidOptionError "$OPTARG"
            ;;

        # option requires arg.
        :)
            printRequiresArgumentError "$OPTARG"
            ;;

    esac
done

shift $((OPTIND-1))

css_file=$1

# check to make sure CSS file exists.
if [ ! -f $css_file ]; then
    error "Can't find the target sass/css file. Check the path?"
    echo
    exit 1
fi

# check to make sure css has an @font-face declaration inside.
grep '@font-face' $css_file > /dev/null 2>&1
if [[ $? -ne 0 ]]; then
    error "$css_file doesn't seem to have an @font-face declaration." \
        "Galena could serialize the fonts, but wouldn't have anywhere to put them."
    echo
    exit 1
fi

# for each font, encode and insert.
IFS=',', read -ra fonts <<< "$fonts_csv"
for font in ${fonts[@]}; do
    echo "Generating data:uri for $font..."

    # generate base64 encoding
    echo "Encoding in base64..."
    base64=$(base64 $font)

    # figure out file type, and figure out the correct mime type for
    # the data:uri schema.
    # NOTE: `file --mime-type` does not quite do what we want, so we have
    # to get more specific.
    echo "Getting mime type..."
    getMimeAndFormatType $font mime_type format_type

    if [[ $mime_type == 'unknown' ]]; then
        echo "$font has an unknown font type."
        echo "Skipping..."
        continue

    elif [[ $mime_type == 'application/vnd.ms-fontobject' ]]; then
        echo "${t_white}${t_bold}WARNING:${t_reset} data:uris are unsupported by IE 6-7, which use .eot fonts."
        echo "          Use at your own risk."

    fi

    # Inserting
    echo "Inserting base64..."

    sed 's#url(.*).*format(\"'$format_type'\")#url(data:'$mime_type';base64,'$base64') format(\"'$format_type'\")#g' < $css_file > tmp

    mv tmp $css_file

    success
    echo

done
success "Complete."
echo


# }
# =============================================================================
